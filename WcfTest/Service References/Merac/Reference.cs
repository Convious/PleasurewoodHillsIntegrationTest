//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfTest.Merac {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://merac.co.uk/", ConfigurationName="Merac.MeracOnlineInterfaceSoap")]
    public interface MeracOnlineInterfaceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/TestAuthorisation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestAuthorisation(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/TestAuthorisation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestAuthorisationAsync(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ExtractSiteData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet ExtractSiteData(string AuthToken, string DBVersion, bool UseRetail, bool UseMembership, bool UseAdoptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ExtractSiteData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> ExtractSiteDataAsync(string AuthToken, string DBVersion, bool UseRetail, bool UseMembership, bool UseAdoptions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/CancelUnpaidReservations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        int CancelUnpaidReservations(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/CancelUnpaidReservations", ReplyAction="*")]
        System.Threading.Tasks.Task<int> CancelUnpaidReservationsAsync(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSessionAvailability", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSessionAvailability(string AuthToken, System.Data.DataTable dtRequestedSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSessionAvailability", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSessionAvailabilityAsync(string AuthToken, System.Data.DataTable dtRequestedSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSessionCalendar", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSessionCalendar(string AuthToken, System.Data.DataTable dtRequestedSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSessionCalendar", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSessionCalendarAsync(string AuthToken, System.Data.DataTable dtRequestedSessions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTemplateSalesItems", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTemplateSalesItems(string AuthToken, string FromDate, int TemplateID, bool CheckAvalability, bool HideZeroAvailability, string ResourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTemplateSalesItems", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTemplateSalesItemsAsync(string AuthToken, string FromDate, int TemplateID, bool CheckAvalability, bool HideZeroAvailability, string ResourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTemplateSalesItemsSession", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTemplateSalesItemsSession(string AuthToken, int Branch, int TemplateID, string SessionDate, int SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTemplateSalesItemsSession", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTemplateSalesItemsSessionAsync(string AuthToken, int Branch, int TemplateID, string SessionDate, int SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetResourceSessionLookup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetResourceSessionLookup(string AuthToken, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetResourceSessionLookup", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetResourceSessionLookupAsync(string AuthToken, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingAvailability", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSeatingAvailability(string AuthToken, int BranchID, string FromDateTime, int SessionTypeID, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingAvailability", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingAvailabilityAsync(string AuthToken, int BranchID, string FromDateTime, int SessionTypeID, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingTicketKey", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSeatingTicketKey(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingTicketKey", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingTicketKeyAsync(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingTickets", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSeatingTickets(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID, int BlockID, int SeatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetSeatingTickets", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingTicketsAsync(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID, int BlockID, int SeatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/IsSeatTaken", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool IsSeatTaken(string AuthToken, int SessionID, int BlockID, int SeatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/IsSeatTaken", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> IsSeatTakenAsync(string AuthToken, int SessionID, int BlockID, int SeatID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ReserveSessionSeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ReserveSessionSeat(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ReserveSessionSeat", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ReserveSessionSeatAsync(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UnreserveSessionSeat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable UnreserveSessionSeat(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UnreserveSessionSeat", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> UnreserveSessionSeatAsync(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveBookings", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SaveBookings(string AuthToken, System.Data.DataTable dtRequestedBookings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveBookings", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> SaveBookingsAsync(string AuthToken, System.Data.DataTable dtRequestedBookings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ChangeBookingStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ChangeBookingStatus(string AuthToken, System.Data.DataTable dtRequestedBookings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ChangeBookingStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ChangeBookingStatusAsync(string AuthToken, System.Data.DataTable dtRequestedBookings);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SaveMember(string AuthToken, System.Data.DataTable dtSaveMembers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveMember", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> SaveMemberAsync(string AuthToken, System.Data.DataTable dtSaveMembers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/CancelMember", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable CancelMember(string AuthToken, string strMemberIDs, int intWebBookingRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/CancelMember", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> CancelMemberAsync(string AuthToken, string strMemberIDs, int intWebBookingRef);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipSchemes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMembershipSchemes(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipSchemes", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipSchemesAsync(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipRenewalAddress", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMembershipRenewalAddress(string AuthToken, int AccountRecordNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipRenewalAddress", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipRenewalAddressAsync(string AuthToken, int AccountRecordNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipRenewalCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMembershipRenewalCustomer(string AuthToken, int AccountRecordNumber, int CustomerSequence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipRenewalCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipRenewalCustomerAsync(string AuthToken, int AccountRecordNumber, int CustomerSequence);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipsForRenewal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetMembershipsForRenewal(string AuthToken, string MembershipNo, string Surname, string Postcode, int AllowDiscXDaysBeforeExpiry, int AllowDiscXDaysAfterExpiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetMembershipsForRenewal", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipsForRenewalAsync(string AuthToken, string MembershipNo, string Surname, string Postcode, int AllowDiscXDaysBeforeExpiry, int AllowDiscXDaysAfterExpiry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/IsValidMembership", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable IsValidMembership(string AuthToken, string CardNumber, string PostCode, string Surname, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/IsValidMembership", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> IsValidMembershipAsync(string AuthToken, string CardNumber, string PostCode, string Surname, int TemplateID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardbyDept", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDashboardbyDept(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardbyDept", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardbyDeptAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardbyAnz", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDashboardbyAnz(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardbyAnz", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardbyAnzAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardCompact", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetDashboardCompact(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept, int DayByDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetDashboardCompact", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardCompactAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept, int DayByDay);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/BasicInternetPrices", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable BasicInternetPrices(string AuthToken, string ValidFrom, int ResourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/BasicInternetPrices", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> BasicInternetPricesAsync(string AuthToken, string ValidFrom, int ResourceID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ChangeOrderStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ChangeOrderStatus(string AuthToken, System.Data.DataTable dtChangeOrderStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ChangeOrderStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ChangeOrderStatusAsync(string AuthToken, System.Data.DataTable dtChangeOrderStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/MemberExpiryReset", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable MemberExpiryReset(string AuthToken, System.Data.DataTable dtMemberExpiryReset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/MemberExpiryReset", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> MemberExpiryResetAsync(string AuthToken, System.Data.DataTable dtMemberExpiryReset);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveOrderItem", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable SaveOrderItem(string AuthToken, System.Data.DataTable dtSaveOrderItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/SaveOrderItem", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> SaveOrderItemAsync(string AuthToken, System.Data.DataTable dtSaveOrderItems);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetStockAvailability", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetStockAvailability(string AuthToken, int pBranchID, string pBarcodeIDs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetStockAvailability", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetStockAvailabilityAsync(string AuthToken, int pBranchID, string pBarcodeIDs);
        
        // CODEGEN: Parameter 'GetModifiedImageResult' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetModifiedImage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        WcfTest.Merac.GetModifiedImageResponse GetModifiedImage(WcfTest.Merac.GetModifiedImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetModifiedImage", ReplyAction="*")]
        System.Threading.Tasks.Task<WcfTest.Merac.GetModifiedImageResponse> GetModifiedImageAsync(WcfTest.Merac.GetModifiedImageRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ApplyTicketRules", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ApplyTicketRules(string AuthToken, System.Data.DataTable dtTickets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ApplyTicketRules", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ApplyTicketRulesAsync(string AuthToken, System.Data.DataTable dtTickets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetAvailableCalendarDatesByTemplate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAvailableCalendarDatesByTemplate(string AuthToken, int TemplateID, string FromDate, string ToDate, bool HideFullDates, string TodayDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetAvailableCalendarDatesByTemplate", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAvailableCalendarDatesByTemplateAsync(string AuthToken, int TemplateID, string FromDate, string ToDate, bool HideFullDates, string TodayDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetBookingStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetBookingStatus(string AuthToken, string BookingRefs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetBookingStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetBookingStatusAsync(string AuthToken, string BookingRefs);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetAnalysisCodes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetAnalysisCodes(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetAnalysisCodes", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetAnalysisCodesAsync(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTicketsBySessionHeader", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetTicketsBySessionHeader(string AuthToken, int Branch, int ShdRecNo, string AnlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/GetTicketsBySessionHeader", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetTicketsBySessionHeaderAsync(string AuthToken, int Branch, int ShdRecNo, string AnlCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/AdditionalSessionLegs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable AdditionalSessionLegs(string AuthToken, int Branch, int ShdRecno, int SessionType, int PreselectShdRecno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/AdditionalSessionLegs", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> AdditionalSessionLegsAsync(string AuthToken, int Branch, int ShdRecno, int SessionType, int PreselectShdRecno);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/AddCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddCustomer(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/AddCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddCustomerAsync(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UpdateCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateCustomer(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UpdateCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateCustomerAsync(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/RetrieveCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable RetrieveCustomer(string AuthToken, int Branch, int AccRecNo, int CusSeq, int CusMembNo, int CusCardNum, string Surname, string PostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/RetrieveCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> RetrieveCustomerAsync(string AuthToken, int Branch, int AccRecNo, int CusSeq, int CusMembNo, int CusCardNum, string Surname, string PostCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ValidateMemberCard", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable ValidateMemberCard(string AuthToken, int Branch, string CardNum, int TemplateID, int BkrResNo, int CheckBackXDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/ValidateMemberCard", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ValidateMemberCardAsync(string AuthToken, int Branch, string CardNum, int TemplateID, int BkrResNo, int CheckBackXDays);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UniqueVoucherReserve", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UniqueVoucherReserve(string AuthToken, int Branch, string VoucherCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UniqueVoucherReserve", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UniqueVoucherReserveAsync(string AuthToken, int Branch, string VoucherCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UniqueVoucherUnreserve", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UniqueVoucherUnreserve(string AuthToken, int Branch, string VoucherCodeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/UniqueVoucherUnreserve", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UniqueVoucherUnreserveAsync(string AuthToken, int Branch, string VoucherCodeList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/MOIVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MOIVersion(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/MOIVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MOIVersionAsync(string AuthToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/InternetVoucherAdmin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable InternetVoucherAdmin(string AuthToken, System.Data.DataTable dtVoucherAdmin);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://merac.co.uk/InternetVoucherAdmin", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> InternetVoucherAdminAsync(string AuthToken, System.Data.DataTable dtVoucherAdmin);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetModifiedImage", WrapperNamespace="http://merac.co.uk/", IsWrapped=true)]
    public partial class GetModifiedImageRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://merac.co.uk/", Order=0)]
        public string AuthToken;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://merac.co.uk/", Order=1)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://merac.co.uk/", Order=2)]
        public System.DateTime CurrentModifiedDateUTC;
        
        public GetModifiedImageRequest() {
        }
        
        public GetModifiedImageRequest(string AuthToken, string FileName, System.DateTime CurrentModifiedDateUTC) {
            this.AuthToken = AuthToken;
            this.FileName = FileName;
            this.CurrentModifiedDateUTC = CurrentModifiedDateUTC;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetModifiedImageResponse", WrapperNamespace="http://merac.co.uk/", IsWrapped=true)]
    public partial class GetModifiedImageResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://merac.co.uk/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetModifiedImageResult;
        
        public GetModifiedImageResponse() {
        }
        
        public GetModifiedImageResponse(byte[] GetModifiedImageResult) {
            this.GetModifiedImageResult = GetModifiedImageResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface MeracOnlineInterfaceSoapChannel : WcfTest.Merac.MeracOnlineInterfaceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MeracOnlineInterfaceSoapClient : System.ServiceModel.ClientBase<WcfTest.Merac.MeracOnlineInterfaceSoap>, WcfTest.Merac.MeracOnlineInterfaceSoap {
        
        public MeracOnlineInterfaceSoapClient() {
        }
        
        public MeracOnlineInterfaceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MeracOnlineInterfaceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeracOnlineInterfaceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MeracOnlineInterfaceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string TestAuthorisation(string AuthToken) {
            return base.Channel.TestAuthorisation(AuthToken);
        }
        
        public System.Threading.Tasks.Task<string> TestAuthorisationAsync(string AuthToken) {
            return base.Channel.TestAuthorisationAsync(AuthToken);
        }
        
        public System.Data.DataSet ExtractSiteData(string AuthToken, string DBVersion, bool UseRetail, bool UseMembership, bool UseAdoptions) {
            return base.Channel.ExtractSiteData(AuthToken, DBVersion, UseRetail, UseMembership, UseAdoptions);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> ExtractSiteDataAsync(string AuthToken, string DBVersion, bool UseRetail, bool UseMembership, bool UseAdoptions) {
            return base.Channel.ExtractSiteDataAsync(AuthToken, DBVersion, UseRetail, UseMembership, UseAdoptions);
        }
        
        public int CancelUnpaidReservations(string AuthToken) {
            return base.Channel.CancelUnpaidReservations(AuthToken);
        }
        
        public System.Threading.Tasks.Task<int> CancelUnpaidReservationsAsync(string AuthToken) {
            return base.Channel.CancelUnpaidReservationsAsync(AuthToken);
        }
        
        public System.Data.DataTable GetSessionAvailability(string AuthToken, System.Data.DataTable dtRequestedSessions) {
            return base.Channel.GetSessionAvailability(AuthToken, dtRequestedSessions);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSessionAvailabilityAsync(string AuthToken, System.Data.DataTable dtRequestedSessions) {
            return base.Channel.GetSessionAvailabilityAsync(AuthToken, dtRequestedSessions);
        }
        
        public System.Data.DataTable GetSessionCalendar(string AuthToken, System.Data.DataTable dtRequestedSessions) {
            return base.Channel.GetSessionCalendar(AuthToken, dtRequestedSessions);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSessionCalendarAsync(string AuthToken, System.Data.DataTable dtRequestedSessions) {
            return base.Channel.GetSessionCalendarAsync(AuthToken, dtRequestedSessions);
        }
        
        public System.Data.DataTable GetTemplateSalesItems(string AuthToken, string FromDate, int TemplateID, bool CheckAvalability, bool HideZeroAvailability, string ResourceType) {
            return base.Channel.GetTemplateSalesItems(AuthToken, FromDate, TemplateID, CheckAvalability, HideZeroAvailability, ResourceType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTemplateSalesItemsAsync(string AuthToken, string FromDate, int TemplateID, bool CheckAvalability, bool HideZeroAvailability, string ResourceType) {
            return base.Channel.GetTemplateSalesItemsAsync(AuthToken, FromDate, TemplateID, CheckAvalability, HideZeroAvailability, ResourceType);
        }
        
        public System.Data.DataTable GetTemplateSalesItemsSession(string AuthToken, int Branch, int TemplateID, string SessionDate, int SessionID) {
            return base.Channel.GetTemplateSalesItemsSession(AuthToken, Branch, TemplateID, SessionDate, SessionID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTemplateSalesItemsSessionAsync(string AuthToken, int Branch, int TemplateID, string SessionDate, int SessionID) {
            return base.Channel.GetTemplateSalesItemsSessionAsync(AuthToken, Branch, TemplateID, SessionDate, SessionID);
        }
        
        public System.Data.DataTable GetResourceSessionLookup(string AuthToken, int TemplateID) {
            return base.Channel.GetResourceSessionLookup(AuthToken, TemplateID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetResourceSessionLookupAsync(string AuthToken, int TemplateID) {
            return base.Channel.GetResourceSessionLookupAsync(AuthToken, TemplateID);
        }
        
        public System.Data.DataTable GetSeatingAvailability(string AuthToken, int BranchID, string FromDateTime, int SessionTypeID, int TemplateID) {
            return base.Channel.GetSeatingAvailability(AuthToken, BranchID, FromDateTime, SessionTypeID, TemplateID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingAvailabilityAsync(string AuthToken, int BranchID, string FromDateTime, int SessionTypeID, int TemplateID) {
            return base.Channel.GetSeatingAvailabilityAsync(AuthToken, BranchID, FromDateTime, SessionTypeID, TemplateID);
        }
        
        public System.Data.DataTable GetSeatingTicketKey(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID) {
            return base.Channel.GetSeatingTicketKey(AuthToken, BranchID, SessionTypeID, TemplateID, SessionID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingTicketKeyAsync(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID) {
            return base.Channel.GetSeatingTicketKeyAsync(AuthToken, BranchID, SessionTypeID, TemplateID, SessionID);
        }
        
        public System.Data.DataTable GetSeatingTickets(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID, int BlockID, int SeatID) {
            return base.Channel.GetSeatingTickets(AuthToken, BranchID, SessionTypeID, TemplateID, SessionID, BlockID, SeatID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSeatingTicketsAsync(string AuthToken, int BranchID, int SessionTypeID, int TemplateID, int SessionID, int BlockID, int SeatID) {
            return base.Channel.GetSeatingTicketsAsync(AuthToken, BranchID, SessionTypeID, TemplateID, SessionID, BlockID, SeatID);
        }
        
        public bool IsSeatTaken(string AuthToken, int SessionID, int BlockID, int SeatID) {
            return base.Channel.IsSeatTaken(AuthToken, SessionID, BlockID, SeatID);
        }
        
        public System.Threading.Tasks.Task<bool> IsSeatTakenAsync(string AuthToken, int SessionID, int BlockID, int SeatID) {
            return base.Channel.IsSeatTakenAsync(AuthToken, SessionID, BlockID, SeatID);
        }
        
        public System.Data.DataTable ReserveSessionSeat(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey) {
            return base.Channel.ReserveSessionSeat(AuthToken, SessionID, BlockID, SeatID, TicketKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ReserveSessionSeatAsync(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey) {
            return base.Channel.ReserveSessionSeatAsync(AuthToken, SessionID, BlockID, SeatID, TicketKey);
        }
        
        public System.Data.DataTable UnreserveSessionSeat(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey) {
            return base.Channel.UnreserveSessionSeat(AuthToken, SessionID, BlockID, SeatID, TicketKey);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> UnreserveSessionSeatAsync(string AuthToken, int SessionID, int BlockID, int SeatID, string TicketKey) {
            return base.Channel.UnreserveSessionSeatAsync(AuthToken, SessionID, BlockID, SeatID, TicketKey);
        }
        
        public System.Data.DataTable SaveBookings(string AuthToken, System.Data.DataTable dtRequestedBookings) {
            return base.Channel.SaveBookings(AuthToken, dtRequestedBookings);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SaveBookingsAsync(string AuthToken, System.Data.DataTable dtRequestedBookings) {
            return base.Channel.SaveBookingsAsync(AuthToken, dtRequestedBookings);
        }
        
        public System.Data.DataTable ChangeBookingStatus(string AuthToken, System.Data.DataTable dtRequestedBookings) {
            return base.Channel.ChangeBookingStatus(AuthToken, dtRequestedBookings);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ChangeBookingStatusAsync(string AuthToken, System.Data.DataTable dtRequestedBookings) {
            return base.Channel.ChangeBookingStatusAsync(AuthToken, dtRequestedBookings);
        }
        
        public System.Data.DataTable SaveMember(string AuthToken, System.Data.DataTable dtSaveMembers) {
            return base.Channel.SaveMember(AuthToken, dtSaveMembers);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SaveMemberAsync(string AuthToken, System.Data.DataTable dtSaveMembers) {
            return base.Channel.SaveMemberAsync(AuthToken, dtSaveMembers);
        }
        
        public System.Data.DataTable CancelMember(string AuthToken, string strMemberIDs, int intWebBookingRef) {
            return base.Channel.CancelMember(AuthToken, strMemberIDs, intWebBookingRef);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> CancelMemberAsync(string AuthToken, string strMemberIDs, int intWebBookingRef) {
            return base.Channel.CancelMemberAsync(AuthToken, strMemberIDs, intWebBookingRef);
        }
        
        public System.Data.DataTable GetMembershipSchemes(string AuthToken) {
            return base.Channel.GetMembershipSchemes(AuthToken);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipSchemesAsync(string AuthToken) {
            return base.Channel.GetMembershipSchemesAsync(AuthToken);
        }
        
        public System.Data.DataTable GetMembershipRenewalAddress(string AuthToken, int AccountRecordNumber) {
            return base.Channel.GetMembershipRenewalAddress(AuthToken, AccountRecordNumber);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipRenewalAddressAsync(string AuthToken, int AccountRecordNumber) {
            return base.Channel.GetMembershipRenewalAddressAsync(AuthToken, AccountRecordNumber);
        }
        
        public System.Data.DataTable GetMembershipRenewalCustomer(string AuthToken, int AccountRecordNumber, int CustomerSequence) {
            return base.Channel.GetMembershipRenewalCustomer(AuthToken, AccountRecordNumber, CustomerSequence);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipRenewalCustomerAsync(string AuthToken, int AccountRecordNumber, int CustomerSequence) {
            return base.Channel.GetMembershipRenewalCustomerAsync(AuthToken, AccountRecordNumber, CustomerSequence);
        }
        
        public System.Data.DataTable GetMembershipsForRenewal(string AuthToken, string MembershipNo, string Surname, string Postcode, int AllowDiscXDaysBeforeExpiry, int AllowDiscXDaysAfterExpiry) {
            return base.Channel.GetMembershipsForRenewal(AuthToken, MembershipNo, Surname, Postcode, AllowDiscXDaysBeforeExpiry, AllowDiscXDaysAfterExpiry);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetMembershipsForRenewalAsync(string AuthToken, string MembershipNo, string Surname, string Postcode, int AllowDiscXDaysBeforeExpiry, int AllowDiscXDaysAfterExpiry) {
            return base.Channel.GetMembershipsForRenewalAsync(AuthToken, MembershipNo, Surname, Postcode, AllowDiscXDaysBeforeExpiry, AllowDiscXDaysAfterExpiry);
        }
        
        public System.Data.DataTable IsValidMembership(string AuthToken, string CardNumber, string PostCode, string Surname, int TemplateID) {
            return base.Channel.IsValidMembership(AuthToken, CardNumber, PostCode, Surname, TemplateID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> IsValidMembershipAsync(string AuthToken, string CardNumber, string PostCode, string Surname, int TemplateID) {
            return base.Channel.IsValidMembershipAsync(AuthToken, CardNumber, PostCode, Surname, TemplateID);
        }
        
        public System.Data.DataTable GetDashboardbyDept(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept) {
            return base.Channel.GetDashboardbyDept(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardbyDeptAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept) {
            return base.Channel.GetDashboardbyDeptAsync(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept);
        }
        
        public System.Data.DataTable GetDashboardbyAnz(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept) {
            return base.Channel.GetDashboardbyAnz(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardbyAnzAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept) {
            return base.Channel.GetDashboardbyAnzAsync(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept);
        }
        
        public System.Data.DataTable GetDashboardCompact(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept, int DayByDay) {
            return base.Channel.GetDashboardCompact(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept, DayByDay);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetDashboardCompactAsync(string AuthToken, int Branch, string SelectedDate, int Outlet, int Dept, int SubDept, int DayByDay) {
            return base.Channel.GetDashboardCompactAsync(AuthToken, Branch, SelectedDate, Outlet, Dept, SubDept, DayByDay);
        }
        
        public System.Data.DataTable BasicInternetPrices(string AuthToken, string ValidFrom, int ResourceID) {
            return base.Channel.BasicInternetPrices(AuthToken, ValidFrom, ResourceID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> BasicInternetPricesAsync(string AuthToken, string ValidFrom, int ResourceID) {
            return base.Channel.BasicInternetPricesAsync(AuthToken, ValidFrom, ResourceID);
        }
        
        public System.Data.DataTable ChangeOrderStatus(string AuthToken, System.Data.DataTable dtChangeOrderStatus) {
            return base.Channel.ChangeOrderStatus(AuthToken, dtChangeOrderStatus);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ChangeOrderStatusAsync(string AuthToken, System.Data.DataTable dtChangeOrderStatus) {
            return base.Channel.ChangeOrderStatusAsync(AuthToken, dtChangeOrderStatus);
        }
        
        public System.Data.DataTable MemberExpiryReset(string AuthToken, System.Data.DataTable dtMemberExpiryReset) {
            return base.Channel.MemberExpiryReset(AuthToken, dtMemberExpiryReset);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> MemberExpiryResetAsync(string AuthToken, System.Data.DataTable dtMemberExpiryReset) {
            return base.Channel.MemberExpiryResetAsync(AuthToken, dtMemberExpiryReset);
        }
        
        public System.Data.DataTable SaveOrderItem(string AuthToken, System.Data.DataTable dtSaveOrderItems) {
            return base.Channel.SaveOrderItem(AuthToken, dtSaveOrderItems);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SaveOrderItemAsync(string AuthToken, System.Data.DataTable dtSaveOrderItems) {
            return base.Channel.SaveOrderItemAsync(AuthToken, dtSaveOrderItems);
        }
        
        public System.Data.DataTable GetStockAvailability(string AuthToken, int pBranchID, string pBarcodeIDs) {
            return base.Channel.GetStockAvailability(AuthToken, pBranchID, pBarcodeIDs);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetStockAvailabilityAsync(string AuthToken, int pBranchID, string pBarcodeIDs) {
            return base.Channel.GetStockAvailabilityAsync(AuthToken, pBranchID, pBarcodeIDs);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        WcfTest.Merac.GetModifiedImageResponse WcfTest.Merac.MeracOnlineInterfaceSoap.GetModifiedImage(WcfTest.Merac.GetModifiedImageRequest request) {
            return base.Channel.GetModifiedImage(request);
        }
        
        public byte[] GetModifiedImage(string AuthToken, string FileName, System.DateTime CurrentModifiedDateUTC) {
            WcfTest.Merac.GetModifiedImageRequest inValue = new WcfTest.Merac.GetModifiedImageRequest();
            inValue.AuthToken = AuthToken;
            inValue.FileName = FileName;
            inValue.CurrentModifiedDateUTC = CurrentModifiedDateUTC;
            WcfTest.Merac.GetModifiedImageResponse retVal = ((WcfTest.Merac.MeracOnlineInterfaceSoap)(this)).GetModifiedImage(inValue);
            return retVal.GetModifiedImageResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<WcfTest.Merac.GetModifiedImageResponse> WcfTest.Merac.MeracOnlineInterfaceSoap.GetModifiedImageAsync(WcfTest.Merac.GetModifiedImageRequest request) {
            return base.Channel.GetModifiedImageAsync(request);
        }
        
        public System.Threading.Tasks.Task<WcfTest.Merac.GetModifiedImageResponse> GetModifiedImageAsync(string AuthToken, string FileName, System.DateTime CurrentModifiedDateUTC) {
            WcfTest.Merac.GetModifiedImageRequest inValue = new WcfTest.Merac.GetModifiedImageRequest();
            inValue.AuthToken = AuthToken;
            inValue.FileName = FileName;
            inValue.CurrentModifiedDateUTC = CurrentModifiedDateUTC;
            return ((WcfTest.Merac.MeracOnlineInterfaceSoap)(this)).GetModifiedImageAsync(inValue);
        }
        
        public System.Data.DataTable ApplyTicketRules(string AuthToken, System.Data.DataTable dtTickets) {
            return base.Channel.ApplyTicketRules(AuthToken, dtTickets);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ApplyTicketRulesAsync(string AuthToken, System.Data.DataTable dtTickets) {
            return base.Channel.ApplyTicketRulesAsync(AuthToken, dtTickets);
        }
        
        public System.Data.DataTable GetAvailableCalendarDatesByTemplate(string AuthToken, int TemplateID, string FromDate, string ToDate, bool HideFullDates, string TodayDate) {
            return base.Channel.GetAvailableCalendarDatesByTemplate(AuthToken, TemplateID, FromDate, ToDate, HideFullDates, TodayDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAvailableCalendarDatesByTemplateAsync(string AuthToken, int TemplateID, string FromDate, string ToDate, bool HideFullDates, string TodayDate) {
            return base.Channel.GetAvailableCalendarDatesByTemplateAsync(AuthToken, TemplateID, FromDate, ToDate, HideFullDates, TodayDate);
        }
        
        public System.Data.DataTable GetBookingStatus(string AuthToken, string BookingRefs) {
            return base.Channel.GetBookingStatus(AuthToken, BookingRefs);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetBookingStatusAsync(string AuthToken, string BookingRefs) {
            return base.Channel.GetBookingStatusAsync(AuthToken, BookingRefs);
        }
        
        public System.Data.DataTable GetAnalysisCodes(string AuthToken) {
            return base.Channel.GetAnalysisCodes(AuthToken);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetAnalysisCodesAsync(string AuthToken) {
            return base.Channel.GetAnalysisCodesAsync(AuthToken);
        }
        
        public System.Data.DataTable GetTicketsBySessionHeader(string AuthToken, int Branch, int ShdRecNo, string AnlCode) {
            return base.Channel.GetTicketsBySessionHeader(AuthToken, Branch, ShdRecNo, AnlCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetTicketsBySessionHeaderAsync(string AuthToken, int Branch, int ShdRecNo, string AnlCode) {
            return base.Channel.GetTicketsBySessionHeaderAsync(AuthToken, Branch, ShdRecNo, AnlCode);
        }
        
        public System.Data.DataTable AdditionalSessionLegs(string AuthToken, int Branch, int ShdRecno, int SessionType, int PreselectShdRecno) {
            return base.Channel.AdditionalSessionLegs(AuthToken, Branch, ShdRecno, SessionType, PreselectShdRecno);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> AdditionalSessionLegsAsync(string AuthToken, int Branch, int ShdRecno, int SessionType, int PreselectShdRecno) {
            return base.Channel.AdditionalSessionLegsAsync(AuthToken, Branch, ShdRecno, SessionType, PreselectShdRecno);
        }
        
        public string AddCustomer(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType) {
            return base.Channel.AddCustomer(AuthToken, intBranch, intAccRecNo, intCusSeq, intMembNo, strCardNum, strAccNum, strTitle, strForename, strSurname, strSuffix, strGender, dtmDOB, strHomeTel, strWorkTel, strMobile, strAddress1, strAddress2, strAddress3, strAddress4, strTown, strCounty, strPostcode, strEmail, blnAllowEmail, strPhotoFile, dtmPhotoDate, strCountry, intAccType);
        }
        
        public System.Threading.Tasks.Task<string> AddCustomerAsync(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType) {
            return base.Channel.AddCustomerAsync(AuthToken, intBranch, intAccRecNo, intCusSeq, intMembNo, strCardNum, strAccNum, strTitle, strForename, strSurname, strSuffix, strGender, dtmDOB, strHomeTel, strWorkTel, strMobile, strAddress1, strAddress2, strAddress3, strAddress4, strTown, strCounty, strPostcode, strEmail, blnAllowEmail, strPhotoFile, dtmPhotoDate, strCountry, intAccType);
        }
        
        public string UpdateCustomer(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType) {
            return base.Channel.UpdateCustomer(AuthToken, intBranch, intAccRecNo, intCusSeq, intMembNo, strCardNum, strAccNum, strTitle, strForename, strSurname, strSuffix, strGender, dtmDOB, strHomeTel, strWorkTel, strMobile, strAddress1, strAddress2, strAddress3, strAddress4, strTown, strCounty, strPostcode, strEmail, blnAllowEmail, strPhotoFile, dtmPhotoDate, strCountry, intAccType);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCustomerAsync(
                    string AuthToken, 
                    int intBranch, 
                    int intAccRecNo, 
                    int intCusSeq, 
                    int intMembNo, 
                    string strCardNum, 
                    string strAccNum, 
                    string strTitle, 
                    string strForename, 
                    string strSurname, 
                    string strSuffix, 
                    string strGender, 
                    System.DateTime dtmDOB, 
                    string strHomeTel, 
                    string strWorkTel, 
                    string strMobile, 
                    string strAddress1, 
                    string strAddress2, 
                    string strAddress3, 
                    string strAddress4, 
                    string strTown, 
                    string strCounty, 
                    string strPostcode, 
                    string strEmail, 
                    bool blnAllowEmail, 
                    string strPhotoFile, 
                    System.DateTime dtmPhotoDate, 
                    string strCountry, 
                    int intAccType) {
            return base.Channel.UpdateCustomerAsync(AuthToken, intBranch, intAccRecNo, intCusSeq, intMembNo, strCardNum, strAccNum, strTitle, strForename, strSurname, strSuffix, strGender, dtmDOB, strHomeTel, strWorkTel, strMobile, strAddress1, strAddress2, strAddress3, strAddress4, strTown, strCounty, strPostcode, strEmail, blnAllowEmail, strPhotoFile, dtmPhotoDate, strCountry, intAccType);
        }
        
        public System.Data.DataTable RetrieveCustomer(string AuthToken, int Branch, int AccRecNo, int CusSeq, int CusMembNo, int CusCardNum, string Surname, string PostCode) {
            return base.Channel.RetrieveCustomer(AuthToken, Branch, AccRecNo, CusSeq, CusMembNo, CusCardNum, Surname, PostCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> RetrieveCustomerAsync(string AuthToken, int Branch, int AccRecNo, int CusSeq, int CusMembNo, int CusCardNum, string Surname, string PostCode) {
            return base.Channel.RetrieveCustomerAsync(AuthToken, Branch, AccRecNo, CusSeq, CusMembNo, CusCardNum, Surname, PostCode);
        }
        
        public System.Data.DataTable ValidateMemberCard(string AuthToken, int Branch, string CardNum, int TemplateID, int BkrResNo, int CheckBackXDays) {
            return base.Channel.ValidateMemberCard(AuthToken, Branch, CardNum, TemplateID, BkrResNo, CheckBackXDays);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ValidateMemberCardAsync(string AuthToken, int Branch, string CardNum, int TemplateID, int BkrResNo, int CheckBackXDays) {
            return base.Channel.ValidateMemberCardAsync(AuthToken, Branch, CardNum, TemplateID, BkrResNo, CheckBackXDays);
        }
        
        public string UniqueVoucherReserve(string AuthToken, int Branch, string VoucherCode) {
            return base.Channel.UniqueVoucherReserve(AuthToken, Branch, VoucherCode);
        }
        
        public System.Threading.Tasks.Task<string> UniqueVoucherReserveAsync(string AuthToken, int Branch, string VoucherCode) {
            return base.Channel.UniqueVoucherReserveAsync(AuthToken, Branch, VoucherCode);
        }
        
        public string UniqueVoucherUnreserve(string AuthToken, int Branch, string VoucherCodeList) {
            return base.Channel.UniqueVoucherUnreserve(AuthToken, Branch, VoucherCodeList);
        }
        
        public System.Threading.Tasks.Task<string> UniqueVoucherUnreserveAsync(string AuthToken, int Branch, string VoucherCodeList) {
            return base.Channel.UniqueVoucherUnreserveAsync(AuthToken, Branch, VoucherCodeList);
        }
        
        public string MOIVersion(string AuthToken) {
            return base.Channel.MOIVersion(AuthToken);
        }
        
        public System.Threading.Tasks.Task<string> MOIVersionAsync(string AuthToken) {
            return base.Channel.MOIVersionAsync(AuthToken);
        }
        
        public System.Data.DataTable InternetVoucherAdmin(string AuthToken, System.Data.DataTable dtVoucherAdmin) {
            return base.Channel.InternetVoucherAdmin(AuthToken, dtVoucherAdmin);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> InternetVoucherAdminAsync(string AuthToken, System.Data.DataTable dtVoucherAdmin) {
            return base.Channel.InternetVoucherAdminAsync(AuthToken, dtVoucherAdmin);
        }
    }
}
